usr_03.txt :
============

* ';' repeats the last f/F/t/T command. ',' does it in the opposite direction

* CTRL-B/CTRL-F/CTRL-Y/CTRL-E/CTRL-U/CTRL-D - scroll the screen.

* zt - position the line at the beginning of the window.
    - zz - middle.
    - zb - bottom.

* `` jump to last place.

* CTRL-O / CTRL-I - older/newer positions.

usr_07.txt :
============

* If you want to edit another file, but not write the changes in the current
file yet, you can make it hidden: >

    :hide edit foo.txt

The text with changes is still there, but you can't see it.  This is further
explained in section |22.4|: The buffer list.

* :next and :previous to move to different files.

After jumping to another file, you can use two predefined marks which are very
useful: >

    `"

This takes you to the position where the cursor was when you left the file.
Another mark that is remembered is the position where you made the last
change: >

    `.

usr_10.txt :
============

* :w !wc

Write the file to a program and display its output.

Be careful from :write! wc

usr_24.txt :
============

* Ctrl+U in insert mode deletes to the beginning of the line (like in Bash).

* Ctrl+A in insert mode inserts the text of the previous insert.

* Ctrl+@ does a Ctrl+A and then exits insert mode.

* Ctrl+Y inserts the character above the cursor.

* Ctrl+E inserts the character below the cursor.

* CTRL-R CTRL-R {register}.

* Ctrl+O executes a single normal mode command in insert mode and exits.

usr_25.txt :
============

* :set textwidth=30 - breaks line after a while.

* see :help auto-format .

* <<<<
Vim is able to format more than just plain text.  See |fo-table| for how to
change this.  See the 'joinspaces' option to change the number of spaces used
after a full stop.
   It is possible to use an external program for formatting.  This is useful
if your text can't be properly formatted with Vim's builtin command.  See the
'formatprg' option.
>>>


* :{range}center [width] - to center a text.

* :right

* :left

* Justify a text using


<<<
    :runtime macros/justify.vim

This Vim script file defines a new visual command "_j".  To justify a block of
text, highlight the text in Visual mode and then execute "_j".
   Look in the file for more explanations.  To go there, do "gf" on this name:
$VIMRUNTIME/macros/justify.vim.

>>>

*   :g/./,/^$/join

*

usr_27.txt :
============

* Offsets - /default/2 - second line past the pattern.

* /const/e

* /const/e+1

* /const/e-1

usr_28.txt :
============

* zf creates a fold. (= fold).

* zo opens the fold.

* zc closes the fold.

usr_29.txt :
============

* :tags shows the list of tags that were traversed.

* :tag goes to the tag on top of the list.

* :stag - split tag.

* :tnext - jump to the other matches for the same tag.

* :tselect tagname - select.

* tags accept regular expression using a leading "/".

* :ptag or Ctrl+W } - preview the tag in a separate window.

* :pclose

* :pedit defs.h

* :psearch popen

* [# - jump to the start of #if .. #endif.

* ]# - next #else or #endif.

* [m - inside C++/Java - method.

* [( ]) - work on () pairs.

* [/ - start/end of comments.

* [I - how the variable was declared.

usr_30.txt :
============

* To see the whole message in quickfix do :cc.

* :colder and :cnewer to go forward/backward to an error list.

* cinoptions to customise the C style.
