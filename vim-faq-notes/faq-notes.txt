* Errata: question 3.1 - What is the latest version of vim is out of date.

* You can press the CTRL-D key after typing the help keyword to get a list of
all the help keywords containing the supplied pattern.

From the help window, you can use the ":tag" command to search for
keywords. For example,

    :tselect /window

You can use the ":helpgrep" command to search for the given text in all the
help files. The quickfix window will be opened with all the matching lines.

							*:file_f*
:f[ile][!] {name}	Sets the current file name to {name}.  The optional !
			avoids truncating the message, as with |:file|.
			If the buffer did have a name, that name becomes the
			|alternate-file| name.  An unlisted buffer is created
			to hold the old name.

5.3. How do I change the current directory to the directory of the current
     file?

You can use the following command to change the current directory to the
directory of the current file:

    :cd %:p:h

------------------------------------------------------------

5.7. How do I edit a file whose name is under the cursor?

You can use the gf command to edit a file whose name is under the cursor.
You can use the CTRL-W f command to edit the file in a new window.

------------------------------------------------------------

5.10. How do I open a file in read-only mode?

You can open a file in read-only mode using the ":view" command:

    :view <filename>

This command sets the 'readonly' option for the opened buffer. You can also
use the "-R" command-line option to open a file in read-only mode:

    $ vim -R <filename>

You can also use the symbolic link "view" to open a file in read-only mode:

    $ view <filename>

For more information, read

    :help 07.6
    :help 'readonly'
    :help 'modifiable'
    :help :view
    :help :sview
    :help view
    :help -R
    :help -M

------------------------------------------------------------

6.1. How do I switch between files while editing multiple files in Vim?

There are several ways to switch between multiple files. You can use the
":buffer" command to switch between multiple files. For example,

    :buffer file1
    :buffer file2

You can also use the CTRL-^ key to switch between buffers. By specifying a
count before pressing the key, you can edit the buffer with that number.
Without the count, you can edit the alternate buffer by pressing CTRL-^

You can also use the ":e #" command to edit a particular buffer:

    :e #5

For more information, read

    :help edit-files
    :help :buffer
    :help CTRL-^
    :help alternate-file
    :help 22.4
    :help 07.3

------------------------------------------------------------

6.4. How do I open multiple files at once from within Vim?

There are several ways to open multiple files at once from within Vim. You
can use the ":next" command to specify a group of files:

    :next f1.txt f2.txt
    :next *.c

You can use the :args command to specify a group of files as argument:

    :args f1.txt f2.txt
    :args *.c

After loading the files, you can use the ":next" and ":prev" command to
switch between the files.

For more information, read

    :help 07.2
    :help :next
    :help :args_f
    :help argument-list

------------------------------------------------------------

8.1. I have made some modifications to a buffer. How do I edit another
     buffer without saving the modified buffer and also without losing the
     modifications?

You can set the 'hidden' option to edit a file without losing modifications
to the current file:

    :set hidden

By setting the 'hidden' option, you can also save the modification history
(undo-history) for the buffer. Otherwise, as you switch between files, the
undo-history will be lost.

For more information, read

    :help 'hidden'
    :help hidden-quit
    :help :hide

------------------------------------------------------------

8.3. How do I replace the buffer in the current window with a blank buffer?

You can use the ":enew" command to load an empty buffer in place of the
buffer in the current window.

For more information, read

    :help :enew

------------------------------------------------------------

8.5. How do I open all the current buffers in separate windows?

You can use the ":ball" or ":sball" commands to open all the buffers
in the buffer list:

    :ball

For more information, read

    :help :ball

------------------------------------------------------------

9.3. How do I zoom into or out of a window?

You can zoom into a window (close all the windows except the current
window) using the "CTRL-W o" command or the ":only" ex command.

You can use the "CTRL-W _" command or the ":resize" ex command to increase
the current window height to the highest possible without closing other
windows.

You can use the "CTRL-W |" command or the ":vertical resize" ex command to
increase the current window width to the highest possible without closing
other windows.

You can use the "CTRL-W =" command to make the height and width of all the
windows equal.

------------------------------------------------------------

10.8. How do I scroll two or more buffers simultaneously?

You can set the "scrollbind" option for each of the buffer to scroll them
simultaneously.

For more information, read

    :help 'scrollbind'
    :help scroll-binding
    :help 'scrollopt'

------------------------------------------------------------

10.13. How do I go back to previous cursor locations?

You can go back to the cursor location before the latest jump using the ''
or `` command. You can use the CTRL-O command to go back to older cursor
positions and the CTRL-I command to go to the newer cursor positions in the
jump list.

For more information, read

    :help 03.10
    :help mark-motions
    :help jump-motions

------------------------------------------------------------

11.2. How do I enter a carriage return character in a search pattern?

You can either use '\r' or <CTRL-V><CTRL-M> to enter a carriage return
character in a pattern. In Vim scripts, it is better to use '\r' for the
carriage return character.

For more information, read

    :help sub-replace-special


11.3. How do I search for the character ^M?

You can enter the ^M character in a search command by first pressing the
CTRL-V key and then pressing the CTRL-M key.

    /^V^M

You can also use the "\r" character. In Vim scripts, "\r" is preferred.

For more information, read

    :help c_CTRL-V
    :help using_CTRL-V
    :help /\r

------------------------------------------------------------

11.4. How can I search/replace characters that display as '~R', '~S', etc.?

You can use the 'ga' command to display the ASCII value/code for the
special character. For example, let us say the ASCII value is 142. Then you
can use the following command to search for the special character:

    /^V142

where, ^V is entered by pressing CTRL-V.

For more information, read

    :help ga
    :help using_CTRL_V
    :help 24.8

------------------------------------------------------------

11.14. How do I search and replace a string in multiple files?

You can use the 'argdo' or 'bufdo' or 'windo' commands to execute an ex
command on multiple files. For example:

    :argdo %s/foo/bar/g

For more information, read

    :help :argdo
    :help :bufdo
    :help :windo

------------------------------------------------------------

11.18. How do I search for a character by its ASCII value?

You can search for a character by its ASCII value by pressing CTRL-V
followed by the decimal or hexadecimal or octal value of that character in
the search "/" command.  To determine the ASCII value of a character you
can use the ":ascii" or the "ga" command.

For more information, read

    :help i_CTRL-V_digit
    :help :ascii
    :help ga

------------------------------------------------------------

If you also want the corresponding line numbers, then you can use the
following command:

    :g/<pattern>/#

------------------------------------------------------------

11.21. How do I search for a text string that spans multiple lines?

You can search for a text string that spans multiple lines using the \_x
regular expression atom. For example, to search for the text string "Hello
World", you can use the following search command:

    /Hello\_sWorld

This will match the word "Hello" followed by a newline character and then
the word "World" at the beginning of the next line. This will also match
the word "Hello" immediately followed by a space character and then the
word "World". When searching for the "Hello World" string, to include the
space characters at the end and beginning of the line, you can use the
following search command:

    /Hello\_s\+World

For more information, read

    :help 27.8
    :help pattern-atoms
    :help /\_
    :help pattern-searches

------------------------------------------------------------

In normal mode, you can use the ":put <register>" command to insert the
contents of <register>. For example, use the ":put d" command to insert
the contents of register "d" into the current buffer.

------------------------------------------------------------

13.3. I am using CTRL-P/CTRL-N to complete words in insert mode. How do I
      complete words that occur after the just completed word?

You can use CTRL-X CTRL-N and CTRL-X CTRL-P keys to complete words that are
present after the just completed word.

For more information, read

    :help i_CTRL-X_CTRL-P
    :help i_CTRL-X_CTRL-N
    :help ins-completion

------------------------------------------------------------

14.5. How do I indent lines in insert mode?

In insert mode, you can press the CTRL-T key to insert one shiftwidth of
indent at the start of the current line. In insert mode, you can use the
CTRL-D key to delete on shiftwidth of indent at the start of the current
line. You can also use the CTRL-O >> and CTRL-O << commands to indent the
current line in insert mode.

For more information, read

    :help i_CTRL-T
    :help i_CTRL-D
    :help i_0_CTRL-D
    :help i_CTRL-O
    :help >
    :help <<

------------------------------------------------------------

15.3. How do I apply an ex-command on a set of visually selected lines?

When you select a range of lines in visual mode, the < register is set to
the start of the visual region and the > register is set to the end of the
visual region. You can use these registers to specify the range for an ex
command. After visually selecting the lines, press ":" to go to the command
mode.  Vim will automatically insert the visual range '<,'>. You can run
any ex-command on the visual range.

For more information, read

    :help v_:
    :help '<
    :help '

------------------------------------------------------------

15.6. When I visually select a set of lines and press the > key to indent
      the selected lines, the visual mode ends. How can I reselect the
      region for further operation?  (or) How do I re-select the last
      selected visual area again?

You can use the 'gv' command to reselect the last selected visual area. You
can also use the marks '< and '> to jump to the beginning or the end of the
last selected visual area.

For more information, read

    :help gv
    :help '<
    :help '

------------------------------------------------------------

16.4. How do I copy the output from an ex-command into a buffer?

To copy the output from an ex-command into a buffer, you have to first get
the command output into a register. You can use the ":redir" command to get
the output into a register. For example,

    :redir @a
    :g/HelloWord/p
    :redir END

Now the register 'a' will contain the output from the ex command
"g/HelloWord/p". Now you can paste the contents of the register 'a' into a
buffer. You can also send or append the output of an ex-command into a file
using the 'redir' command.

You can prefix the ":global" command with ":silent", to avoid having the
lines printed to the screen.

To redirect the output from an ex-command to a file, you can use the
following set of commands:

    :redir > myfile
    :g/HelloWord/p
    :redir END

For more information, read

    :help :redir
    :help :silent

------------------------------------------------------------

16.5. When I press the tab key to complete the name of a file in the
      command mode, if there are more than one matching file names, then
      Vim completes the first matching file name and displays a list of all
      matching filenames. How do I configure Vim to only display the list
      of all the matching filenames and not complete the first one?

You can modify the 'wildmode' option to configure the way Vim completes
filenames in the command mode. In this case, you can set the 'wildmode'
option to 'list':

    :set wildmode=list

For more information, read

    :help 'wildmode'

------------------------------------------------------------

16.8. How do I increase the height of the command-line?

You can increase the height of the command-line by changing the 'cmdheight'
option:

    :set cmdheight=2

For more information, read

    :help 'cmdheight'
    :help hit-enter
    :help 05.7

------------------------------------------------------------

19.8. How do I display (view) all the invisible characters in a file?

You can set the 'list' option to see all the invisible characters in your
file.

    :set list

With this option set, you can view space characters, tabs, newlines,
trailing space characters and wrapped lines.

You can modify the 'listchars' option to configure how the invisible
characters are displayed. For example, with the following command all the
trailing space characters will be displayed with a '.' character.

    :set listchars=trail:.

For more information, read

    :help 'listchars'
    :help 'list'

------------------------------------------------------------

20.10. I want to use the Tab key to indent a block of text and Shift-Tab
       key to unindent a block of text. How do I map the keys to do this?
       This behavior is similar to textpad, visual studio, etc.

Use the following mapping:

    :inoremap <S-Tab> <C-O><LT><LT>
    :nnoremap <Tab> >>
    :nnoremap <S-Tab> <LT><LT>
    :vnoremap <Tab> >
    :vnoremap <S-Tab> <LT>

Note that, the <S-Tab> mapping will work only if Vim receives the correct
key sequence. This is mostly the case with GUI Vim.

For more information, read

    :help :inoremap
    :help :nnoremap
    :help :vnoremap
    :help <S-Tab>
    :help i_CTRL-O
    :help >
    :help <<
    :help <LT>


== Reached the beginning of section 21 ==

